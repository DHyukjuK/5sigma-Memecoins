# stage2_optimization.py

from stage1_questionnaire import Questionnaire       # outputs risk‐aversion γ
from stage1_metrics import AssetMetrics              # assume this returns μ & Σ for your assets
import cvxpy as cp
import numpy as np

def optimize_portfolio():
    # 1. Investor risk aversion (γ > 0, higher = more risk‑averse)
    γ = Questionnaire().get_risk_aversion()

    # 2. Asset metrics (n assets)
    #    μ: np.array shape (n,) of expected returns
    #    Σ: np.array shape (n,n) of return covariances
    metrics = AssetMetrics().load()
    μ = metrics['expected_returns']        # e.g. [E[R₁], E[R₂], …]
    Σ = metrics['covariance_matrix']       # var/cov matrix

    n = μ.shape[0]
    w = cp.Variable(n)

    # 3. Define objective: maximize μᵀw – (γ/2) wᵀΣw
    portfolio_return = μ @ w
    portfolio_risk   = cp.quad_form(w, Σ)
    objective = cp.Maximize(portfolio_return - (γ/2) * portfolio_risk)

    # 4. Constraints: full investment, no shorting
    constraints = [
        cp.sum(w) == 1,
        w >= 0
    ]

    prob = cp.Problem(objective, constraints)
    prob.solve()

    return w.value

if __name__ == "__main__":
    weights = optimize_portfolio()
    print("Optimal weights:", weights)
